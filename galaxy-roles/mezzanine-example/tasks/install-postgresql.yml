---
# CentOS 8 has PostgreSQL 10 - https://www.postgresql.org/docs/10/index.html
# https://docs.ansible.com/ansible/latest/modules/postgresql_info_module.html#postgresql-info-module
- name: Install default PostgreSQL package, CentOS 8 has PostgreSQL 10.
  # https://docs.ansible.com/ansible/latest/modules/package_module.html?highlight=package%20management
  package:
    name: "{{ postgresql_packages }}"
    state: latest

# TAKEN FROM https://galaxy.ansible.com/geerlingguy/postgresql
- name: Set PostgreSQL environment variables.
  template:
    src: postgres.sh.j2
    dest: /etc/profile.d/postgres.sh
    mode: 0644
  notify: restart postgresql

- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database server is initialized.
  command: "{{ postgresql_bin_path }}/pg_ctl init -D {{ postgresql_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgresql_user }}"
  notify: restart postgresql

# - name: Check if the PostgreSQL database server is running.
#   command: "{{ postgresql_bin_path }}/pg_ctl status -D {{ postgresql_data_dir }} -l {{ postgresql_logfile }}"
#   become: true
#   become_user: "{{ postgresql_user }}"
#   register: pg_ctl_result
#   # https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html
#   ignore_errors: yes
#   # Only mention it was changed when the database wasn't running.
#   changed_when: pg_ctl_result.stdout == postgresql_server_stopped_message

# # - name: Parse out the current PostgreSQL database server status.
# #   set_fact:
# #   # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#regular-expression-filters
# #     current_postgresql_server_status: "{{ pg_ctl_result.stdout | regex_search('{{ postgresql_server_stopped_message }}') }}"

# - name: Start the the PostgreSQL database server, first time run only.
#   command: "{{ postgresql_bin_path }}/pg_ctl start -D {{ postgresql_data_dir }} -l {{ postgresql_logfile }}"
#   become: true
#   become_user: "{{ postgresql_user }}"
#   # Only run when it hasn't been started and report it has changed when its run.
#   when: pg_ctl_result.stdout == postgresql_server_stopped_message
#   changed_when: pg_ctl_result.stdout == postgresql_server_stopped_message
